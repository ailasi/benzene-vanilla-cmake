"""Plays a game of Hex."""

import socket
import time

from game import Game
from program import Program


def _merge_results(result1, result2):
    if result1 == result2:
        return result1
    if result1[0:2] == "B+" and result2[0:2] == "B+":
        return "B+"
    if result1[0:2] == "W+" and result2[0:2] == "W+":
        return "W+"
    return "?"


def _sgf_text(s):
    s = s.replace("\\", "\\\\")
    s = s.replace("]", "\]")
    return s


class GamePlayer:
    class Error(BaseException):
        pass

    def __init__(self, black, white, size):
        self._black = self._original_black = black
        self._white = self._original_white = white
        self._size = size
        self._game = Game()
        self._verbose = False
        self._black_to_move = True

        for program in [self._black, self._white]:
            program.send_command("boardsize " + repr(size) + " " + repr(size))
        self._black_name = self._black.get_name()
        self._white_name = self._white.get_name()

    def get_error_message(self):
        return self._errorMessage

    def adjust_to_move(self, last):
        if last == 'swap-pieces':
            self._black, self._white = self._white, self._black
        else:
            self._black_to_move = not self._black_to_move

    def show_board(self):
        if self._verbose:
            self._send_command(self._black, "showboard")

    def play_opening(self, opening):
        if opening == '':
            return

        moves = opening.split(' ')
        for move in moves:
            if self._black_to_move:
                self._send_command(self._black, "play b " + move)
                self._send_command(self._white, "play b " + move)
            else:
                self._send_command(self._black, "play w " + move)
                self._send_command(self._white, "play w " + move)
            self._game.add_move(move)
            self.adjust_to_move(move)
            self.show_board()

    def continue_game(self):
        resigned = False
        elapsed_black = 0.0
        elapsed_white = 0.0
        while not resigned:
            if self._black_to_move:
                start = time.time()
                move = self._send_command(self._black, "genmove b")
                elapsed_black = elapsed_black + (time.time() - start)
            else:
                start = time.time()
                move = self._send_command(self._white, "genmove w")
                elapsed_white = elapsed_white + (time.time() - start)

            move = str.lower(str.strip(move))
            self._game.add_move(move)

            if self._black_to_move:
                self._send_command(self._white, "play b " + move)
            else:
                self._send_command(self._black, "play w " + move)

            if str.find(move, "resign") >= 0:
                resigned = True

            self.adjust_to_move(move)
            self.show_board()
        self._game.set_elapsed("black", elapsed_black)
        self._game.set_elapsed("white", elapsed_white)

    def play(self, opening, verbose):
        self._verbose = verbose
        self._black_to_move = True
        if verbose:
            print("PLAYING OPENING")
        self.play_opening(opening)
        if verbose:
            print("OPENING PLAYED")
        self.continue_game()
        return self._game

    def save(self, file_name, name, result_black, result_white):
        t = time.localtime()
        sgf_date = time.strftime("%Y-%m-%d", t)
        long_date = time.strftime("%Y-%m-%d %X %Z", t)
        hostname = socket.gethostbyaddr(socket.gethostname())[0]
        result = _merge_results(result_black, result_white)
        f = open(file_name, "w")
        f.write("(\n;"
                "GM[11]SZ[%i]PB[%s]PW[%s]\n"
                "RE[%s]DT[%s]GN[%s]US[main.py]\n"
                "GC[Generated by main.py.\n"
                "Black Cmd: %s\n"
                "White Cmd: %s\n"
                "Host: %s\n"
                "Time: %s\n"
                "Result according to B: %s\n"
                "Result according to W: %s]\n"
                % (self._size, _sgf_text(self._black_name),
                   _sgf_text(self._white_name),
                   result, sgf_date, name,
                   _sgf_text(self._original_black.get_command()),
                   _sgf_text(self._original_white.get_command()),
                   _sgf_text(hostname), _sgf_text(long_date),
                   result_black, result_white))
        black_to_move = 1
        for move in self._game.move_list():
            if black_to_move:
                f.write(";B[")
            else:
                f.write(";W[")
            if move == "swap-pieces":
                f.write("swap-pieces]\n")
            elif move == "resign":
                f.write("resign]\n")
                break
            else:
                f.write(move + "]")
                black_to_move = not black_to_move
            f.write("\n")

        f.write(")\n")
        f.close()

    def _send_command(self, program, command):
        try:
            return program.send_command(command)
        except Program.CommandDenied:
            reason = program.get_deny_reason()
            self._errorMessage = program.get_color() + ": " + reason
            raise GamePlayer.Error
        except Program.Died:
            self._errorMessage = program.get_color() + ": program died"
            raise GamePlayer.Error
